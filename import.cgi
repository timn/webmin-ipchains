#!/usr/bin/perl
#
#    IPchains Firewalling Webmin Module
#    Copyright (C) 1999-2000 by Tim Niemueller <tim@niemueller.de>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    Created  : 12.07.2000

require "./ipchains-lib.pl";
require "./import-lib.pl";
&ReadParse();



&header($text{'import_title'}, undef, undef, undef, undef, undef,
        "Written by<BR><A HREF=mailto:tim\@niemueller.de>Tim Niemueller</A><BR><A HREF=http://www.niemueller.de>Home://page</A>");
print "<BR><HR>\n\n";

if ($in{'confirmed'}) {

  $si = ($config{'scriptinterpreter'}) ? $config{'scriptinterpreter'} : "/bin/sh";
  open(SCRIPT, ">$config{'scriptfile'}");
   print SCRIPT "#!$si\n";
   print SCRIPT "# IPchains Firewalling Script File\n";
   print SCRIPT "# Generated by IPchains Firewalling Webmin Module\n";
   print SCRIPT "# Copyright (C) 1999-2000 by Tim Niemueller, GPL\n";
   print SCRIPT "# http://www.niemueller.de/webmin/modules/ipchains/\n";
   print SCRIPT "# Created on ", &make_date(time), "\n";
   print SCRIPT "\n$ipchains -F\n$ipchains -X\n\n";


  print "$text{'import_chains'}\n<UL>";

  open(FWNAMES, "/proc/net/ip_fwnames");
   while(<FWNAMES>) {
     ($label, $policy, $ref, $packHi, $packLo, $byteHi, $byteLo) = split(/\s+/, $_);
     if (($label !~  /input/i) && ($label !~  /forward/i) && ($label !~  /output/i)) {
       print SCRIPT "$ipchains -N $label\n";
     } else {
       print SCRIPT "$ipchains -P $policy\n";
     }
     printf("..%s %s<BR>\n", $label, ($policy ne "-") ? "($policy)" : "");
   }
  close(FWNAMES);

   print SCRIPT "\n";
  print "</UL>$text{'import_done'}";

  print "<BR><BR><BR>\n\n";

  print "$text{'import_rules'}\n<UL>";

  open(FWCHAINS, "/proc/net/ip_fwchains");
   while(<FWCHAINS>) {
     s/^\s+//;
     # print "$_<BR>\n";
     ($chain, $ips, $iface, $flg, $invflg,
      $proto, $packHi, $packLo, $byteHi, $byteLo,
      $srcports, $destports, $andtos, $xortos,
      $fw_redirpt, $fw_mark, $output_size, $target) = split(/\s+/, $_);
      ($src, $dest)=split(/->/, $ips);
      ($h_srcip, $h_srcmask) = split(/\//, $src);
      ($h_destip, $h_destmask) = split(/\//, $dest);
      $srcip = &denumberize(hex($h_srcip));
      $srcmask = &denumberize(hex($h_srcmask));
      $destip = &denumberize(hex($dest));
      $destmask = &denumberize(hex($h_destmask));

      $srcports =~ s/-/:/g;
      $destports =~ s/-/:/g;

      ($srcfrompt, $srctopt) = split(/:/, $srcports);
      if ($srcfrompt eq $srctopt) { $srcports = $srcfrompt }
      ($destfrompt, $desttopt) = split(/:/, $destports);
      if ($destfrompt eq $desttopt) { $destports = $destfrompt }


      print SCRIPT "$ipchains -A $chain";

      $icmp_type=undef;
      if ($proto = 1) {
        for (keys %icmptypes) {
          if (($icmptypes{$_}->[0] eq $srcports) &&
              ($icmptypes{$_}->[1] eq $destports)) {
            $icmp_type = " --icmp-type $_";
          }
        }
      }


      if ((hex($h_srcip) != 0) || (hex($h_srcmask) != 0) || (($srcports ne "0:65535") && ! $icmp_type)) {
        print SCRIPT (hex($invflg) & $IP_FW_INV_SRCIP) ? " !" : "";
        print SCRIPT " -s $srcip/$srcmask";
        print SCRIPT (hex($invflg) & $IP_FW_INV_SRCPT) ? " !" : "";
        if (((hex($invflg) & $IP_FW_INV_SRCPT) || ($srcports ne "0:65535")) && ! $icmp_type) {
          print SCRIPT " $srcports";
        }
      }

      if ((hex($h_destip) != 0) || (hex($h_destmask) != 0) || (($destports ne "0:65535") && ! $icmp_type)) {
        print SCRIPT (hex($invflg) & $IP_FW_INV_DSTIP) ? " !" : "";
        print SCRIPT " -d $destip/$destmask";
        print SCRIPT (hex($invflg) & $IP_FW_INV_DSTPT) ? " !" : "";
        if (((hex($invflg) & $IP_FW_INV_DSTPT) || ($destports ne "0:65535")) && ! $icmp_type) {
          print SCRIPT " $destports";
        }
      }


      print SCRIPT (hex($invflg) & $IP_FW_INV_VIA) ? " !" : "",
                   ($iface ne "-") ? " -i $iface" : "",
                   (hex($invflg) & $IP_FW_INV_SYN) ? " !" : "",
                   (hex($flg) & $IP_FW_F_TCPSYN) ? " -y" : "",
                   (hex($invflg) & $IP_FW_INV_FRAG) ? " !" : "",
                   (hex($flg) & $IP_FW_F_FRAG) ? " -f" : "",
                   (hex($flg) & $IP_FW_F_PRN) ? " -l" : "",
                   (hex($invflg) & $IP_FW_INV_PROTO) ? " !" : "",
                   ($xortos ne "X00") ? " -t 0x01 0x".substr($xortos, 1,2) : "",
                   ($proto != 0) ? " -p ".scalar(getprotobynumber($proto)) : "",
                   $icmp_type,
                   " -j $target",
                   ($target eq "REDIRECT") ? " ".hex($fw_redirpt) : "",
                   "\n";

     printf("<B>%s</B> &nbsp; %s %s/%s:%s -&gt; %s %s/%s:%s &nbsp; %s%s %s%s %s%s %s %s %s%s %s &nbsp; %s<BR>\n",
            $chain,
            (hex($invflg) & $IP_FW_INV_SRCIP) ? "!" : "",
            $srcip, $srcmask, $srcports,
            (hex($invflg) & $IP_FW_INV_DSTIP) ? "!" : "",
            $destip, $destmask, $destports,
            (hex($invflg) & $IP_FW_INV_VIA) ? "!" : "",
            ($iface ne "-") ? "$iface" : "",
            (hex($invflg) & $IP_FW_INV_SYN) ? "!" : "",
            (hex($flg) & $IP_FW_F_TCPSYN) ? "S" : "",
            (hex($invflg) & $IP_FW_INV_FRAG) ? "!" : "",
            (hex($flg) & $IP_FW_F_FRAG) ? "F" : "",
            (hex($flg) & $IP_FW_F_PRN) ? "L" : "",
            ($xortos ne "X00") ? "0x".substr($xortos, 1,2) : "",
            (hex($invflg) & $IP_FW_INV_PROTO) ? "!" : "",
            ($proto != 0) ? scalar(getprotobynumber($proto)) : "",
            $icmp_type,
            "<B>$target</B>"
            );

   }
  close(FWCHAINS);

  print "</UL>$text{'import_done'}";


} else {
  print "\n$text{'import_desc'}\n\n";

  if (-e $config{'scriptfile'}) {
    print "<BR>$text{'import_exist'}\n";
  }

  print "<FORM ACTION=\"$ENV{'SCRIPT_NAME'}\" MEHTOD=POST>\n";
  print "<INPUT TYPE=hidden NAME=\"confirmed\" VALUE=1>\n";
  print "<CENTER><INPUT TYPE=submit VALUE=\"  $text{'import_button'}  \"></CENTER>\n</FORM>\n";
}


print "<BR><BR><HR>";
&footer("", $text{'import_return'});



### END of import.cgi ###.